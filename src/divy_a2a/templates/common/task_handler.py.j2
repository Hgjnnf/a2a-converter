from a2a.server.events.event_queue import EventQueue
from a2a.types import (
    TaskState,
    TaskStatusUpdateEvent,
    TaskArtifactUpdateEvent,
    TaskStatus,
)
from a2a.utils import new_agent_text_message, new_text_artifact

def handle_submitted(item, context, event_queue: EventQueue, task) -> bool:
    # submission already enqueued by executor.new_task()
    return False

def handle_working(item, context, event_queue: EventQueue, task) -> bool:
    event_queue.enqueue_event(
        TaskStatusUpdateEvent(
            status=TaskStatus(
                state=TaskState.working,
                message=new_agent_text_message(item["content"], task.contextId, task.id),
            ),
            final=False,
            contextId=task.contextId,
            taskId=task.id,
        )
    )
    return False

def handle_input_required(item, context, event_queue: EventQueue, task) -> bool:
    event_queue.enqueue_event(
        TaskStatusUpdateEvent(
            status=TaskStatus(
                state=TaskState.input_required,
                message=new_agent_text_message(item["content"], task.contextId, task.id),
            ),
            final=True,
            contextId=task.contextId,
            taskId=task.id,
        )
    )
    return True

def handle_completed(item, context, event_queue: EventQueue, task) -> bool:
    # 1) Push the final artifact
    event_queue.enqueue_event(
        TaskArtifactUpdateEvent(
            append=False,
            contextId=task.contextId,
            taskId=task.id,
            lastChunk=True,
            artifact=new_text_artifact(
                name="result",
                description="Final result",
                text=item["content"],
            ),
        )
    )
    # 2) Then mark complete
    event_queue.enqueue_event(
        TaskStatusUpdateEvent(
            status=TaskStatus(state=TaskState.completed),
            final=True,
            contextId=task.contextId,
            taskId=task.id,
        )
    )
    return True

def handle_failed(item, context, event_queue: EventQueue, task) -> bool:
    event_queue.enqueue_event(
        TaskStatusUpdateEvent(
            status=TaskStatus(
                state=TaskState.failed,
                message=new_agent_text_message(item["content"], task.contextId, task.id),
            ),
            final=True,
            contextId=task.contextId,
            taskId=task.id,
        )
    )
    raise Exception(f"Task failed: {item['content']}")

def handle_canceled(item, context, event_queue: EventQueue, task) -> bool:
    event_queue.enqueue_event(
        TaskStatusUpdateEvent(
            status=TaskStatus(
                state=TaskState.canceled,
                message=new_agent_text_message(item["content"], task.contextId, task.id),
            ),
            final=True,
            contextId=task.contextId,
            taskId=task.id,
        )
    )
    raise Exception(f"Task canceled: {item['content']}")

def handle_rejected(item, context, event_queue: EventQueue, task) -> bool:
    event_queue.enqueue_event(
        TaskStatusUpdateEvent(
            status=TaskStatus(
                state=TaskState.rejected,
                message=new_agent_text_message(item["content"], task.contextId, task.id),
            ),
            final=True,
            contextId=task.contextId,
            taskId=task.id,
        )
    )
    raise Exception(f"Task rejected: {item['content']}")

def handle_auth_required(item, context, event_queue: EventQueue, task) -> bool:
    # if your flow needs an auth step, enqueue here
    return False

def handle_unknown(item, context, event_queue: EventQueue, task) -> bool:
    event_queue.enqueue_event(
        TaskStatusUpdateEvent(
            status=TaskStatus(
                state=TaskState.unknown,
                message=new_agent_text_message(
                    f"Unknown task state: {item.get('task_state')}",
                    task.contextId,
                    task.id,
                ),
            ),
            final=True,
            contextId=task.contextId,
            taskId=task.id,
        )
    )
    raise Exception(f"Unknown task state: {item.get('task_state')}")

# Map the raw "task_state" string to the above handlers:
_STATE_HANDLERS = {
    "submitted":       handle_submitted,
    "working":         handle_working,
    "input_required":  handle_input_required,
    "completed":       handle_completed,
    "canceled":        handle_canceled,
    "failed":          handle_failed,
    "rejected":        handle_rejected,
    "auth_required":   handle_auth_required,
}

def handle_event(item: dict, context, event_queue: EventQueue, task) -> bool:
    """
    Given a raw wrapper event dict with 'task_state' and 'content',
    calls the correct handler. Returns True if terminal.
    """
    state = item.get("task_state", "").lower()
    handler = _STATE_HANDLERS.get(state, handle_unknown)
    return handler(item, context, event_queue, task)
